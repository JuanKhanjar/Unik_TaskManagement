// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Unik_TaskManagement.Persistence.Data;

#nullable disable

namespace UnikTaskManagement.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Unik_TaskManagement.Domain.Booking", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedarbejdeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OpgaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookId");

                    b.HasIndex("MedarbejdeId");

                    b.HasIndex("OpgaveId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Kunde", b =>
                {
                    b.Property<Guid>("KundeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KundeId");

                    b.ToTable("Kunder");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Medarbejde", b =>
                {
                    b.Property<Guid>("MedarbejdeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Job")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedarbejdeId");

                    b.ToTable("Medarbejder");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Opgave", b =>
                {
                    b.Property<Guid>("OpgaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OpgaveId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Opgaver");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("KundeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProjectId");

                    b.HasIndex("KundeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Skill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedarbejdeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SkillTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.HasIndex("MedarbejdeId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Booking", b =>
                {
                    b.HasOne("Unik_TaskManagement.Domain.Medarbejde", "Medarbejde")
                        .WithMany()
                        .HasForeignKey("MedarbejdeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unik_TaskManagement.Domain.Opgave", "Opgave")
                        .WithMany()
                        .HasForeignKey("OpgaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unik_TaskManagement.Domain.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medarbejde");

                    b.Navigation("Opgave");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Opgave", b =>
                {
                    b.HasOne("Unik_TaskManagement.Domain.Project", null)
                        .WithMany("Opgaver")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Project", b =>
                {
                    b.HasOne("Unik_TaskManagement.Domain.Kunde", "Kunde")
                        .WithMany("KundeProjects")
                        .HasForeignKey("KundeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kunde");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Skill", b =>
                {
                    b.HasOne("Unik_TaskManagement.Domain.Medarbejde", null)
                        .WithMany("Skilles")
                        .HasForeignKey("MedarbejdeId");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Kunde", b =>
                {
                    b.Navigation("KundeProjects");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Medarbejde", b =>
                {
                    b.Navigation("Skilles");
                });

            modelBuilder.Entity("Unik_TaskManagement.Domain.Project", b =>
                {
                    b.Navigation("Opgaver");
                });
#pragma warning restore 612, 618
        }
    }
}
